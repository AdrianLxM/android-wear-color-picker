apply plugin: 'com.android.library'
apply plugin: 'maven'

group = 'org.jraf'
ext.groupPath = group.replace('.', '/')
ext.artifactId = 'android-wear-color-picker'
version = '1.0.0'

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.0'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 22
    }

    buildTypes {
        release {
            // Do not run proguard for this library: it would strip all code since it is not called anywhere
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.google.android.support:wearable:1.1.0'
}

// Use "gradle uploadArchives" to deploy the aar to your local maven repository
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().getUrl())

            pom.artifactId = artifactId
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links('http://docs.oracle.com/javase/7/docs/api/');
        options.linksOffline('https://developer.android.com/reference/', "${android.sdkDirectory}/docs/reference");
        options.tags(['attr', 'X'])
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}Javadoc", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
        description "Generate a Javadoc jar for $variant.name."
        classifier = 'javadoc'
        from buildDir.getPath() + '/docs/javadoc'
    }
}

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}Sources", type: Jar) {
        description "Generate a Sources jar for $variant.name."
        classifier = 'sources'
        from variant.javaCompile.source
    }
}

// Use "gradle install" to deploy the aar to your local maven repository, as well as the javadoc and the source jars
task install(dependsOn: ["assembleRelease", "uploadArchives", "jarReleaseSources", "jarReleaseJavadoc"]) << {
    description "Make the library, generate a source jar, generate a javadoc jar, and copy everything to the local maven repository"

    // Copy the sources jar
    println("Copying " + buildDir.getPath() + "/libs/library-${version}-sources.jar" + " to " + "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}" + "/${artifactId}-${version}-sources.jar")
    copy {
        from buildDir.getPath() + "/libs/library-${version}-sources.jar"
        into "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}"
        rename "library-${version}-sources.jar", "${artifactId}-${version}-sources.jar"
    }

    // Copy the javadoc jar
    copy {
        println("Copying " + buildDir.getPath() + "/libs/library-${version}-javadoc.jar" + " to " + "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}" + "/${artifactId}-${version}-javadoc.jar")
        from buildDir.getPath() + "/libs/library-${version}-javadoc.jar"
        into "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}"
        rename "library-${version}-javadoc.jar", "${artifactId}-${version}-javadoc.jar"
    }
}
